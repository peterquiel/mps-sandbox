package FluentEditor.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AliasRoot_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AndLogicalOperator_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AwesomeStructure_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new BlankWord_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Block_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new BlockContent_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new BlockRoot_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new BoldWord_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new BooleanCollection_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new CollectionSepartorRoot_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Content_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Doc_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new DocLine_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new EmptyBlockShouldLookEmptyBlock_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new EmptyBlockShouldLookEmptyRoot_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new EmptyLine_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new EmptyLineReplacementRoot_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new Hierachy_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new IndentRoot_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new LettersWord_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new Line_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new MatchingBracesRoot_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new NewLine_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new NonBlockingTest_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new NumberWord_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new Prepend_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new PrependKeywordRoot_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new Property_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new Punctuation_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new RichTextRoot_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new SimpleContent_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new StringCollection_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new SubMenuOperator_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new SubstitutionMenuRoot_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new SuperStructure_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new TextLine_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new Word_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new WordOperand_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new WordThatIsWrapped_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new LettersWord_TransformationMenu());
      case 1:
        return Collections.<TransformationMenu>singletonList(new NonBlockingTest_TransformationMenu());
      case 2:
        return Collections.<TransformationMenu>singletonList(new SubMenuExpression_TransformationMenu());
      case 3:
        return Collections.<TransformationMenu>singletonList(new WordThatIsWrapped_TransformationMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredNamedTransformationMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a1a4, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new PrependKeyWord_Implements_Left_Substition()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new PrependKeyWord_Transformation()});
            default:
          }
        }
        break;
      case 1:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0b1a4, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new TestPuncution()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new EmptyLine_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new WordOperand_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x6409f53087b6e722L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c35ead0L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c3fb9eeL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x58bc23e4187461e0L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x6409f53087b16c5dL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x1571a79012681332L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x152366698d5110baL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x58bc23e4187461bfL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c44e5eeL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c439b22L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c472441L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c37b5ffL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c37b5f6L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x1571a79012681331L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x1571a79012681327L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c3fb9e3L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c3fb9dfL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c47243dL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c3a500cL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x58bc23e418b45b73L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x6409f53087b16c65L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c47243aL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x58bc23e418a205aeL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x366702a83bb05b81L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x58bc23e418893437L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x1571a790126e4614L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x1571a790125ba484L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c3a500fL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x366702a83bbb3bafL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x58bc23e4187461b1L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c47243eL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c439b25L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x616035b61da102c5L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x5c4a3efb3aad474eL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c3fb9e9L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x58bc23e4187461b8L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x58bc23e4187461bcL), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x616035b61da102c4L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x3c8f388022e53b9cL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x58bc23e418b45b73L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x366702a83bb05b81L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x616035b61da4c277L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x3c8f388022e53b9cL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x1571a790125ba484L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x366702a83bbb3bafL)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x46c894612c3fb9e3L), MetaIdFactory.conceptId(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x616035b61da102c4L)).seal();
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a1a4 = new String[]{"FluentEditor.editor.PrependKeyWord_Implements_Left_Substition", "FluentEditor.editor.PrependKeyWord_Transformation"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0b1a4 = new String[]{"FluentEditor.editor.TestPuncution"};
}
