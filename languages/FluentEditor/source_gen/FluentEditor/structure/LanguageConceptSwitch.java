package FluentEditor.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AliasRoot = 0;
  public static final int AndLogicalOperator = 1;
  public static final int AndOprator = 2;
  public static final int AwesomeStructure = 3;
  public static final int BlankLine = 4;
  public static final int BlankWord = 5;
  public static final int Block = 6;
  public static final int BlockContent = 7;
  public static final int BlockRoot = 8;
  public static final int BoldWord = 9;
  public static final int BooleanCollection = 10;
  public static final int CollectionSepartorRoot = 11;
  public static final int Content = 12;
  public static final int Doc = 13;
  public static final int DocLine = 14;
  public static final int EmptyBlockShouldLookEmptyBlock = 15;
  public static final int EmptyBlockShouldLookEmptyRoot = 16;
  public static final int EmptyLine = 17;
  public static final int EmptyLineReplacementRoot = 18;
  public static final int Hierachy = 19;
  public static final int ILine = 20;
  public static final int IWord = 21;
  public static final int IndentRoot = 22;
  public static final int LettersWord = 23;
  public static final int Line = 24;
  public static final int LogicalOperator = 25;
  public static final int MatchingBracesRoot = 26;
  public static final int NewLine = 27;
  public static final int NonBlockingTest = 28;
  public static final int NumberWord = 29;
  public static final int OrLogicalOperator = 30;
  public static final int OrOperator = 31;
  public static final int Prepend = 32;
  public static final int PrependKeywordRoot = 33;
  public static final int Property = 34;
  public static final int Punctuation = 35;
  public static final int RichTextRoot = 36;
  public static final int SimpleContent = 37;
  public static final int StringCollection = 38;
  public static final int Structure = 39;
  public static final int SubMenuExpression = 40;
  public static final int SubMenuOperand = 41;
  public static final int SubMenuOperator = 42;
  public static final int SubstitutionMenuRoot = 43;
  public static final int SuperStructure = 44;
  public static final int TextLine = 45;
  public static final int Word = 46;
  public static final int WordOperand = 47;
  public static final int WordThatIsWrapped = 48;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL);
    builder.put(0x6409f53087b6e722L, AliasRoot);
    builder.put(0x46c894612c35ead0L, AndLogicalOperator);
    builder.put(0x616035b61da102cbL, AndOprator);
    builder.put(0x46c894612c3fb9eeL, AwesomeStructure);
    builder.put(0x58bc23e4187461b5L, BlankLine);
    builder.put(0x58bc23e4187461e0L, BlankWord);
    builder.put(0x6409f53087b16c5dL, Block);
    builder.put(0x1571a79012681332L, BlockContent);
    builder.put(0x152366698d5110baL, BlockRoot);
    builder.put(0x58bc23e4187461bfL, BoldWord);
    builder.put(0x46c894612c44e5eeL, BooleanCollection);
    builder.put(0x46c894612c439b22L, CollectionSepartorRoot);
    builder.put(0x46c894612c472441L, Content);
    builder.put(0x46c894612c37b5ffL, Doc);
    builder.put(0x46c894612c37b5f6L, DocLine);
    builder.put(0x1571a79012681331L, EmptyBlockShouldLookEmptyBlock);
    builder.put(0x1571a79012681327L, EmptyBlockShouldLookEmptyRoot);
    builder.put(0x46c894612c3fb9e3L, EmptyLine);
    builder.put(0x46c894612c3fb9dfL, EmptyLineReplacementRoot);
    builder.put(0x46c894612c47243dL, Hierachy);
    builder.put(0x58bc23e4187461b4L, ILine);
    builder.put(0x58bc23e4187461c2L, IWord);
    builder.put(0x46c894612c3a500cL, IndentRoot);
    builder.put(0x58bc23e418b45b73L, LettersWord);
    builder.put(0x6409f53087b16c65L, Line);
    builder.put(0x6409f53087b6e726L, LogicalOperator);
    builder.put(0x46c894612c47243aL, MatchingBracesRoot);
    builder.put(0x58bc23e418a205aeL, NewLine);
    builder.put(0x366702a83bb05b81L, NonBlockingTest);
    builder.put(0x58bc23e418893437L, NumberWord);
    builder.put(0x46c894612c35ead1L, OrLogicalOperator);
    builder.put(0x616035b61da102ccL, OrOperator);
    builder.put(0x1571a790126e4614L, Prepend);
    builder.put(0x1571a790125ba484L, PrependKeywordRoot);
    builder.put(0x46c894612c3a500fL, Property);
    builder.put(0x366702a83bbb3bafL, Punctuation);
    builder.put(0x58bc23e4187461b1L, RichTextRoot);
    builder.put(0x46c894612c47243eL, SimpleContent);
    builder.put(0x46c894612c439b25L, StringCollection);
    builder.put(0x46c894612c3fb9e2L, Structure);
    builder.put(0x616035b61da4c277L, SubMenuExpression);
    builder.put(0x616035b61da4c278L, SubMenuOperand);
    builder.put(0x616035b61da102c5L, SubMenuOperator);
    builder.put(0x5c4a3efb3aad474eL, SubstitutionMenuRoot);
    builder.put(0x46c894612c3fb9e9L, SuperStructure);
    builder.put(0x58bc23e4187461b8L, TextLine);
    builder.put(0x58bc23e4187461bcL, Word);
    builder.put(0x616035b61da102c4L, WordOperand);
    builder.put(0x3c8f388022e53b9cL, WordThatIsWrapped);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
