package FluentEditor.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.module.ModelAccess;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import javax.swing.SwingUtilities;
import java.lang.reflect.InvocationTargetException;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class NonBlockingTest__BehaviorDescriptor extends BaseBHDescriptor {
  private static final Logger LOG = LogManager.getLogger(NonBlockingTest__BehaviorDescriptor.class);
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x366702a83bb05b81L, "FluentEditor.structure.NonBlockingTest");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Void> execAsyncCall_id3pB0EwVG6AB = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("execAsyncCall").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3pB0EwVG6AB").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(ModelAccess.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(execAsyncCall_id3pB0EwVG6AB);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void execAsyncCall_id3pB0EwVG6AB(@NotNull final SNode __thisNode__, final ModelAccess modelAccess) {
    SPropertyOperations.assign(__thisNode__, MetaAdapterFactory.getProperty(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x366702a83bb05b81L, 0x366702a83bb05b9aL, "asyncUpdated"), "Loading...");
    new Thread() {

      @Override
      public void run() {
        try {
          //  do some expesive stuff here 
          Thread.sleep(2000);

          // Access to modelAccess is only allowed within AWT event dispatching Thread. 
          SwingUtilities.invokeAndWait(new Runnable() {
            public void run() {
              modelAccess.executeCommand(new Runnable() {
                public void run() {
                  // updating the model  
                  SPropertyOperations.assign(__thisNode__, MetaAdapterFactory.getProperty(0x2d38ea1d8ed2480eL, 0xa77f95b0aabfe4dfL, 0x366702a83bb05b81L, 0x366702a83bb05b9aL, "asyncUpdated"), "The answer 42 @" + System.currentTimeMillis() + "ms");
                }
              });

            }
          });
        } catch (InterruptedException ie) {
          Thread.currentThread().isInterrupted();
        } catch (InvocationTargetException e) {
          LoggingRuntime.logMsgView(Level.ERROR, "Exception during ... ", NonBlockingTest__BehaviorDescriptor.class, e, null);
        }
      }
    }.start();
  }

  /*package*/ NonBlockingTest__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        execAsyncCall_id3pB0EwVG6AB(node, (ModelAccess) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
